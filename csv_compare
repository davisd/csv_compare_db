#!/usr/bin/env python2

import sqlite3
import csv
import sys

def compare(file1, file2, id_column):
    """
    Compare two csv files

    file1 - The first file
    file2 - The second file
    id_column - The name of the column containing the unique ID
    """
    # get a couple of csv readers from the files
    f1=open(file1, 'rb')
    csv1=csv.reader(f1)
    header1=csv1.next()

    f2=open(file2, 'rb')
    csv2=csv.reader(f2)
    header2=csv2.next()

    if (header1 != header2):
        raise Exception ('The header rows do not match')

    if id_column not in header1:
        raise Exception('The id coumn does not exist')

    # create an in-memory db
    conn=sqlite3.connect(':memory:')

    # assemble create table statement
    col_sql='(__row_id integer primary key, __file_id integer, ' \
            '__line_number integer, '
    for col in header1:
        col_sql+='%s text, ' % (col,)
    col_sql='%s)' % (col_sql[:-2],)

    # Create the comparison table
    conn.execute('create table cmp %s' % (col_sql,))

    # read the data into the table
    row_count=1
    for row in csv1:
        row_count+=1
        sql="""insert into cmp values (NULL, 1, ?, %s)""" % \
            (','.join(['?'] * len(row)))
        conn.execute(sql, [row_count] + [unicode(r, encoding='utf-8') for r in row])

    row_count=1
    for row in csv2:
        row_count+=1
        sql="""insert into cmp values (NULL, 2, ?, %s)""" % \
            (','.join(['?'] * len(row)))
        conn.execute(sql, [row_count] + [unicode(r, encoding='utf-8') for r in row])

    # Find duplicate rows within the same files
    c=conn.cursor()
    c.execute(
    """ select %(id_column)s from cmp
        where __file_id=1
        and %(id_column)s in
            (select %(id_column)s from cmp
            where __file_id=1 GROUP BY %(id_column)s
            having (COUNT(%(id_column)s) > 1))
    """ % {'id_column': id_column})

    nonunique_ids=False

    first_iteration=True
    for row in c:
        if first_iteration:
            first_iteration=False
            sys.stderr.write('Duplicate IDs in %s \n' % (file1,))
            nonunique_ids=True
        stderr.write('%s\n' % (row[0],))

    c.close()
    c=conn.cursor()

    c.execute(
    """ select %(id_column)s from cmp
        where __file_id=2
        and %(id_column)s in
            (select %(id_column)s from cmp
            where __file_id=2 GROUP BY %(id_column)s
            having (COUNT(%(id_column)s) > 1))
    """ % {'id_column': id_column})

    first_iteration=True
    for row in c:
        if first_iteration:
            first_iteration=False
            sys.stderr.write('Duplicate IDs in %s \n' % (file2,))
            nonunique_ids=True
        stderr.write('%s\n' % (row[0],))

    c.close()
    c=conn.cursor()

    if nonunique_ids:
        raise Exception('There are non-unique IDs in the individual files. ' \
            'Cannot continue')

    c.close()
    c=conn.cursor()

    # Find rows in file 1, not in file 2
    c.execute("""
        select %(id_column)s from cmp
        where __file_id=1
        and %(id_column)s not in 
            (SELECT %(id_column)s from cmp where __file_id = 2)
    """ % {'id_column': id_column})

    first_iteration=True
    for row in c:
        if first_iteration:
            first_iteration=False
            sys.stderr.write('IDs in %s and NOT in %s:\n' % (file1,file2))
        sys.stderr.write('%s\n' % (row[0]))

    c.close()
    c=conn.cursor()

    # Find rows in file 2, not in file 1
    c.execute("""
        select %(id_column)s from cmp
        where __file_id=2
        and %(id_column)s not in 
            (SELECT %(id_column)s from cmp where __file_id = 1)
    """ % {'id_column': id_column})

    first_iteration=True
    for row in c:
        if first_iteration:
            first_iteration=False
            sys.stderr.write('IDs in %s and NOT in %s:\n' % (file2,file1))
        sys.stderr.write('%s\n' % (row[0]))

    c.close()
    c=conn.cursor()


    # Find rows where the IDs match, 
    # the file_ids do not, and the data is different.
    column_mismatches = ''
    for col in header1:
        if col != id_column:
            column_mismatches+='(c1.%(col)s != c2.%(col)s) or ' % {'col': col}

    sql="""
        select c1.%(columns1)s, c2.%(columns2)s from cmp as c1, cmp as c2
        where c1.__file_id=1 and c2.__file_id=2
        and c1.%(id_column)s = c2.%(id_column)s
        and (%(column_mismatches)s)
    """ % {'columns1': ', c1.'.join(header1), 'columns2': ', c2.'.join(header1),
            'id_column': id_column, 'column_mismatches': column_mismatches[:-4]}

    c.execute(sql)

    first_iteration=True
    writer=csv.writer(sys.stdout)
    for row in c:
        if first_iteration:
            first_iteration=False
            sys.stderr.write('Writing mismatched results to stdout\n')
            writer.writerow(header1)
        writer.writerow(row[:len(row)/2])
        writer.writerow(row[len(row)/2:])

    c.close()

def main(argv=None):
    if argv is None:
        argv = sys.argv
    if len(argv) != 4:
        sys.stderr.write('Usage: %s file1 file2 id_column\n' % (argv[0],))
        return 1
    compare(sys.argv[1], sys.argv[2], sys.argv[3])

if __name__ == "__main__":
        sys.exit(main())

