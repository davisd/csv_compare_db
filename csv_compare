#!/usr/bin/env python2

import csv
import sys
import os
import argparse

def compare(file1, file2, id_column, conn, table_name):
    """
    Compare two csv files

    file1 - The first file
    file2 - The second file
    id_column - The name of the column containing the unique ID
    conn - Established database connection
    table_name -- Name of the db table to create for matching
    """
    # get a couple of csv readers from the files
    f1=open(file1, 'rb')
    csv1=csv.reader(f1)
    header1=csv1.next()

    f2=open(file2, 'rb')
    csv2=csv.reader(f2)
    header2=csv2.next()

    if (header1 != header2):
        raise Exception ('The header rows do not match')

    if id_column not in header1:
        raise Exception('The id coumn does not exist')

    # assemble create table statement
    col_sql='(__file_id integer, __line_number integer, '
    for col in header1:
        col_sql+='%s text, ' % (col,)
    col_sql='%s)' % (col_sql[:-2],)

    # get our first cursor
    c=conn.cursor()

    # Create the comparison table
    c.execute('create table %s %s' % (table_name, col_sql,))

    # Create indexes
    c.execute('create index __file_id_index on %s (__file_id)' \
        % (table_name,))

    c.execute('create index __%(id_column)s_index on %(table_name)s ' \
        '(%(id_column)s)' \
        % {'table_name': table_name, 'id_column': id_column})

    # read the data into the table

    # assemble column SQL
    col_sql='__file_id, __line_number, '
    for col in header1:
        col_sql+='%s, ' % (col,)
    col_sql='%s' % (col_sql[:-2],)

    row_count=1
    for row in csv1:
        row_count+=1
        sql="""insert into %s (%s) values (1, %d, '%s')""" % \
            (table_name, col_sql, row_count,
            "','".join([unicode(col, encoding='utf-8').replace("'", "''") \
                for col in row]),)
        c.execute(sql)

    row_count=1
    for row in csv2:
        row_count+=1
        sql="""insert into %s (%s) values (2, %d, '%s')""" % \
            (table_name, col_sql, row_count,
            "','".join([unicode(col, encoding='utf-8').replace("'", "''") \
                for col in row]),)
        c.execute(sql)

    c.close()
    c=conn.cursor()

    # Find duplicate rows within the same files
    c.execute(
    """ select %(id_column)s from %(table_name)s
        where __file_id=1
        and %(id_column)s in
            (select %(id_column)s from %(table_name)s
            where __file_id=1 GROUP BY %(id_column)s
            having (COUNT(%(id_column)s) > 1))
    """ % {'table_name': table_name, 'id_column': id_column})

    nonunique_ids=False

    first_iteration=True
    for row in c:
        if first_iteration:
            first_iteration=False
            sys.stderr.write('Duplicate IDs in %s \n' % (file1,))
            nonunique_ids=True
        stderr.write('%s\n' % (row[0],))

    c.close()
    c=conn.cursor()

    c.execute(
    """ select %(id_column)s from %(table_name)s
        where __file_id=2
        and %(id_column)s in
            (select %(id_column)s from %(table_name)s
            where __file_id=2 GROUP BY %(id_column)s
            having (COUNT(%(id_column)s) > 1))
    """ % {'table_name': table_name, 'id_column': id_column})

    first_iteration=True
    for row in c:
        if first_iteration:
            first_iteration=False
            sys.stderr.write('Duplicate IDs in %s \n' % (file2,))
            nonunique_ids=True
        stderr.write('%s\n' % (row[0],))

    c.close()
    c=conn.cursor()

    if nonunique_ids:
        raise Exception('There are non-unique IDs in the individual files. ' \
            'Cannot continue')

    c.close()
    c=conn.cursor()

    # Find rows in file 1, not in file 2
    c.execute("""
        select %(id_column)s from %(table_name)s
        where __file_id=1
        and %(id_column)s not in 
            (SELECT %(id_column)s from %(table_name)s where __file_id = 2)
    """ % {'table_name': table_name, 'id_column': id_column})

    first_iteration=True
    for row in c:
        if first_iteration:
            first_iteration=False
            sys.stderr.write('IDs in %s and NOT in %s:\n' % (file1,file2))
        sys.stderr.write('%s\n' % (row[0]))

    c.close()
    c=conn.cursor()

    # Find rows in file 2, not in file 1
    c.execute("""
        select %(id_column)s from %(table_name)s
        where __file_id=2
        and %(id_column)s not in 
            (SELECT %(id_column)s from %(table_name)s where __file_id = 1)
    """ % {'table_name': table_name, 'id_column': id_column})

    first_iteration=True
    for row in c:
        if first_iteration:
            first_iteration=False
            sys.stderr.write('IDs in %s and NOT in %s:\n' % (file2,file1))
        sys.stderr.write('%s\n' % (row[0]))

    c.close()
    c=conn.cursor()


    # Find rows where the IDs match, 
    # the file_ids do not, and the data is different.
    column_mismatches = ''
    for col in header1:
        if col != id_column:
            column_mismatches+='(c1.%(col)s != c2.%(col)s) or ' % {'col': col}

    sql="""
        select c1.%(columns1)s, c2.%(columns2)s from
            %(table_name)s as c1, %(table_name)s as c2
        where c1.__file_id=1 and c2.__file_id=2
        and c1.%(id_column)s = c2.%(id_column)s
        and (%(column_mismatches)s)
    """ % {'table_name': table_name, 'columns1': ', c1.'.join(header1),
            'columns2': ', c2.'.join(header1), 'id_column': id_column,
            'column_mismatches': column_mismatches[:-4]}

    c.execute(sql)

    first_iteration=True
    writer=csv.writer(sys.stdout)
    for row in c:
        if first_iteration:
            first_iteration=False
            sys.stderr.write('Writing mismatched results to stdout\n')
            writer.writerow(header1)
        writer.writerow(row[:len(row)/2])
        writer.writerow(row[len(row)/2:])

    # close the connections
    c.close()
    conn.close()

def get_db_connection(db_type, database):
    try:
        db_handler=__import__(db_type)

        if db_type[:6] == 'sqlite':
            if database != ':memory:' and os.path.exists(database):
                raise argparse.ArgumentTypeError('database file %s already ' \
                    'exists' % (database,))

        return db_handler.connect(database)

    except ImportError:
        raise argparse.ArgumentTypeError('Error importing %s module. Make ' \
                'sure that you have this Python database module installed, ' \
                'you have spelled it correectly, and that you have the ' \
                'module on your Python path.' \
            % (db_type,))

def main(argv=None):
    if argv is None:
        argv = sys.argv

    parser=argparse.ArgumentParser(description='compare two csv files')
    parser.add_argument('file1', help='first file')
    parser.add_argument('file2', help='second file')
    parser.add_argument('identity_col', metavar='identity column',
        help='identity column name')

    parser.add_argument('-t', '--db-type', help='Database python module',
            default='sqlite3')

    parser.add_argument('-d', '--database', metavar='db',
            default=':memory:',
            help='database connection string. For sqlite3, :memory: is a ' \
                'special type and will cause no file to be created.')

    parser.add_argument('-n', '--table-name', help='Database table name for ' \
            'comparison operations',
            default='__cmp')

    args=parser.parse_args(argv[1:])

    file1=args.file1
    file2=args.file2
    identity_col=args.identity_col
    db_type=args.db_type
    database=args.database
    table_name=args.table_name

    # get a connection
    conn=get_db_connection(db_type, database)

    compare(file1, file2, identity_col, conn, table_name)

if __name__ == "__main__":
        sys.exit(main())

